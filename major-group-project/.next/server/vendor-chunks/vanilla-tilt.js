"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vanilla-tilt";
exports.ids = ["vendor-chunks/vanilla-tilt"];
exports.modules = {

/***/ "(ssr)/./node_modules/vanilla-tilt/lib/vanilla-tilt.js":
/*!*******************************************************!*\
  !*** ./node_modules/vanilla-tilt/lib/vanilla-tilt.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nvar classCallCheck = function(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n};\n/**\r\n * Created by Sergiu È˜andor (micku7zu) on 1/27/2017.\r\n * Original idea: https://github.com/gijsroge/tilt.js\r\n * MIT License.\r\n * Version 1.8.1\r\n */ var VanillaTilt = function() {\n    function VanillaTilt(element) {\n        var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        classCallCheck(this, VanillaTilt);\n        if (!(element instanceof Node)) {\n            throw \"Can't initialize VanillaTilt because \" + element + \" is not a Node.\";\n        }\n        this.width = null;\n        this.height = null;\n        this.clientWidth = null;\n        this.clientHeight = null;\n        this.left = null;\n        this.top = null;\n        // for Gyroscope sampling\n        this.gammazero = null;\n        this.betazero = null;\n        this.lastgammazero = null;\n        this.lastbetazero = null;\n        this.transitionTimeout = null;\n        this.updateCall = null;\n        this.event = null;\n        this.updateBind = this.update.bind(this);\n        this.resetBind = this.reset.bind(this);\n        this.element = element;\n        this.settings = this.extendSettings(settings);\n        this.reverse = this.settings.reverse ? -1 : 1;\n        this.resetToStart = VanillaTilt.isSettingTrue(this.settings[\"reset-to-start\"]);\n        this.glare = VanillaTilt.isSettingTrue(this.settings.glare);\n        this.glarePrerender = VanillaTilt.isSettingTrue(this.settings[\"glare-prerender\"]);\n        this.fullPageListening = VanillaTilt.isSettingTrue(this.settings[\"full-page-listening\"]);\n        this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);\n        this.gyroscopeSamples = this.settings.gyroscopeSamples;\n        this.elementListener = this.getElementListener();\n        if (this.glare) {\n            this.prepareGlare();\n        }\n        if (this.fullPageListening) {\n            this.updateClientSize();\n        }\n        this.addEventListeners();\n        this.reset();\n        if (this.resetToStart === false) {\n            this.settings.startX = 0;\n            this.settings.startY = 0;\n        }\n    }\n    VanillaTilt.isSettingTrue = function isSettingTrue(setting) {\n        return setting === \"\" || setting === true || setting === 1;\n    };\n    /**\r\n   * Method returns element what will be listen mouse events\r\n   * @return {Node}\r\n   */ VanillaTilt.prototype.getElementListener = function getElementListener() {\n        if (this.fullPageListening) {\n            return window.document;\n        }\n        if (typeof this.settings[\"mouse-event-element\"] === \"string\") {\n            var mouseEventElement = document.querySelector(this.settings[\"mouse-event-element\"]);\n            if (mouseEventElement) {\n                return mouseEventElement;\n            }\n        }\n        if (this.settings[\"mouse-event-element\"] instanceof Node) {\n            return this.settings[\"mouse-event-element\"];\n        }\n        return this.element;\n    };\n    /**\r\n   * Method set listen methods for this.elementListener\r\n   * @return {Node}\r\n   */ VanillaTilt.prototype.addEventListeners = function addEventListeners() {\n        this.onMouseEnterBind = this.onMouseEnter.bind(this);\n        this.onMouseMoveBind = this.onMouseMove.bind(this);\n        this.onMouseLeaveBind = this.onMouseLeave.bind(this);\n        this.onWindowResizeBind = this.onWindowResize.bind(this);\n        this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);\n        this.elementListener.addEventListener(\"mouseenter\", this.onMouseEnterBind);\n        this.elementListener.addEventListener(\"mouseleave\", this.onMouseLeaveBind);\n        this.elementListener.addEventListener(\"mousemove\", this.onMouseMoveBind);\n        if (this.glare || this.fullPageListening) {\n            window.addEventListener(\"resize\", this.onWindowResizeBind);\n        }\n        if (this.gyroscope) {\n            window.addEventListener(\"deviceorientation\", this.onDeviceOrientationBind);\n        }\n    };\n    /**\r\n   * Method remove event listeners from current this.elementListener\r\n   */ VanillaTilt.prototype.removeEventListeners = function removeEventListeners() {\n        this.elementListener.removeEventListener(\"mouseenter\", this.onMouseEnterBind);\n        this.elementListener.removeEventListener(\"mouseleave\", this.onMouseLeaveBind);\n        this.elementListener.removeEventListener(\"mousemove\", this.onMouseMoveBind);\n        if (this.gyroscope) {\n            window.removeEventListener(\"deviceorientation\", this.onDeviceOrientationBind);\n        }\n        if (this.glare || this.fullPageListening) {\n            window.removeEventListener(\"resize\", this.onWindowResizeBind);\n        }\n    };\n    VanillaTilt.prototype.destroy = function destroy() {\n        clearTimeout(this.transitionTimeout);\n        if (this.updateCall !== null) {\n            cancelAnimationFrame(this.updateCall);\n        }\n        this.element.style.willChange = \"\";\n        this.element.style.transition = \"\";\n        this.element.style.transform = \"\";\n        this.resetGlare();\n        this.removeEventListeners();\n        this.element.vanillaTilt = null;\n        delete this.element.vanillaTilt;\n        this.element = null;\n    };\n    VanillaTilt.prototype.onDeviceOrientation = function onDeviceOrientation(event) {\n        if (event.gamma === null || event.beta === null) {\n            return;\n        }\n        this.updateElementPosition();\n        if (this.gyroscopeSamples > 0) {\n            this.lastgammazero = this.gammazero;\n            this.lastbetazero = this.betazero;\n            if (this.gammazero === null) {\n                this.gammazero = event.gamma;\n                this.betazero = event.beta;\n            } else {\n                this.gammazero = (event.gamma + this.lastgammazero) / 2;\n                this.betazero = (event.beta + this.lastbetazero) / 2;\n            }\n            this.gyroscopeSamples -= 1;\n        }\n        var totalAngleX = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;\n        var totalAngleY = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;\n        var degreesPerPixelX = totalAngleX / this.width;\n        var degreesPerPixelY = totalAngleY / this.height;\n        var angleX = event.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero);\n        var angleY = event.beta - (this.settings.gyroscopeMinAngleY + this.betazero);\n        var posX = angleX / degreesPerPixelX;\n        var posY = angleY / degreesPerPixelY;\n        if (this.updateCall !== null) {\n            cancelAnimationFrame(this.updateCall);\n        }\n        this.event = {\n            clientX: posX + this.left,\n            clientY: posY + this.top\n        };\n        this.updateCall = requestAnimationFrame(this.updateBind);\n    };\n    VanillaTilt.prototype.onMouseEnter = function onMouseEnter() {\n        this.updateElementPosition();\n        this.element.style.willChange = \"transform\";\n        this.setTransition();\n    };\n    VanillaTilt.prototype.onMouseMove = function onMouseMove(event) {\n        if (this.updateCall !== null) {\n            cancelAnimationFrame(this.updateCall);\n        }\n        this.event = event;\n        this.updateCall = requestAnimationFrame(this.updateBind);\n    };\n    VanillaTilt.prototype.onMouseLeave = function onMouseLeave() {\n        this.setTransition();\n        if (this.settings.reset) {\n            requestAnimationFrame(this.resetBind);\n        }\n    };\n    VanillaTilt.prototype.reset = function reset() {\n        this.onMouseEnter();\n        if (this.fullPageListening) {\n            this.event = {\n                clientX: (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.clientWidth,\n                clientY: (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.clientHeight\n            };\n        } else {\n            this.event = {\n                clientX: this.left + (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.width,\n                clientY: this.top + (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.height\n            };\n        }\n        var backupScale = this.settings.scale;\n        this.settings.scale = 1;\n        this.update();\n        this.settings.scale = backupScale;\n        this.resetGlare();\n    };\n    VanillaTilt.prototype.resetGlare = function resetGlare() {\n        if (this.glare) {\n            this.glareElement.style.transform = \"rotate(180deg) translate(-50%, -50%)\";\n            this.glareElement.style.opacity = \"0\";\n        }\n    };\n    VanillaTilt.prototype.getValues = function getValues() {\n        var x = void 0, y = void 0;\n        if (this.fullPageListening) {\n            x = this.event.clientX / this.clientWidth;\n            y = this.event.clientY / this.clientHeight;\n        } else {\n            x = (this.event.clientX - this.left) / this.width;\n            y = (this.event.clientY - this.top) / this.height;\n        }\n        x = Math.min(Math.max(x, 0), 1);\n        y = Math.min(Math.max(y, 0), 1);\n        var tiltX = (this.reverse * (this.settings.max - x * this.settings.max * 2)).toFixed(2);\n        var tiltY = (this.reverse * (y * this.settings.max * 2 - this.settings.max)).toFixed(2);\n        var angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI);\n        return {\n            tiltX: tiltX,\n            tiltY: tiltY,\n            percentageX: x * 100,\n            percentageY: y * 100,\n            angle: angle\n        };\n    };\n    VanillaTilt.prototype.updateElementPosition = function updateElementPosition() {\n        var rect = this.element.getBoundingClientRect();\n        this.width = this.element.offsetWidth;\n        this.height = this.element.offsetHeight;\n        this.left = rect.left;\n        this.top = rect.top;\n    };\n    VanillaTilt.prototype.update = function update() {\n        var values = this.getValues();\n        this.element.style.transform = \"perspective(\" + this.settings.perspective + \"px) \" + \"rotateX(\" + (this.settings.axis === \"x\" ? 0 : values.tiltY) + \"deg) \" + \"rotateY(\" + (this.settings.axis === \"y\" ? 0 : values.tiltX) + \"deg) \" + \"scale3d(\" + this.settings.scale + \", \" + this.settings.scale + \", \" + this.settings.scale + \")\";\n        if (this.glare) {\n            this.glareElement.style.transform = \"rotate(\" + values.angle + \"deg) translate(-50%, -50%)\";\n            this.glareElement.style.opacity = \"\" + values.percentageY * this.settings[\"max-glare\"] / 100;\n        }\n        this.element.dispatchEvent(new CustomEvent(\"tiltChange\", {\n            \"detail\": values\n        }));\n        this.updateCall = null;\n    };\n    /**\r\n   * Appends the glare element (if glarePrerender equals false)\r\n   * and sets the default style\r\n   */ VanillaTilt.prototype.prepareGlare = function prepareGlare() {\n        // If option pre-render is enabled we assume all html/css is present for an optimal glare effect.\n        if (!this.glarePrerender) {\n            // Create glare element\n            var jsTiltGlare = document.createElement(\"div\");\n            jsTiltGlare.classList.add(\"js-tilt-glare\");\n            var jsTiltGlareInner = document.createElement(\"div\");\n            jsTiltGlareInner.classList.add(\"js-tilt-glare-inner\");\n            jsTiltGlare.appendChild(jsTiltGlareInner);\n            this.element.appendChild(jsTiltGlare);\n        }\n        this.glareElementWrapper = this.element.querySelector(\".js-tilt-glare\");\n        this.glareElement = this.element.querySelector(\".js-tilt-glare-inner\");\n        if (this.glarePrerender) {\n            return;\n        }\n        Object.assign(this.glareElementWrapper.style, {\n            \"position\": \"absolute\",\n            \"top\": \"0\",\n            \"left\": \"0\",\n            \"width\": \"100%\",\n            \"height\": \"100%\",\n            \"overflow\": \"hidden\",\n            \"pointer-events\": \"none\",\n            \"border-radius\": \"inherit\"\n        });\n        Object.assign(this.glareElement.style, {\n            \"position\": \"absolute\",\n            \"top\": \"50%\",\n            \"left\": \"50%\",\n            \"pointer-events\": \"none\",\n            \"background-image\": \"linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)\",\n            \"transform\": \"rotate(180deg) translate(-50%, -50%)\",\n            \"transform-origin\": \"0% 0%\",\n            \"opacity\": \"0\"\n        });\n        this.updateGlareSize();\n    };\n    VanillaTilt.prototype.updateGlareSize = function updateGlareSize() {\n        if (this.glare) {\n            var glareSize = (this.element.offsetWidth > this.element.offsetHeight ? this.element.offsetWidth : this.element.offsetHeight) * 2;\n            Object.assign(this.glareElement.style, {\n                \"width\": glareSize + \"px\",\n                \"height\": glareSize + \"px\"\n            });\n        }\n    };\n    VanillaTilt.prototype.updateClientSize = function updateClientSize() {\n        this.clientWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        this.clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    };\n    VanillaTilt.prototype.onWindowResize = function onWindowResize() {\n        this.updateGlareSize();\n        this.updateClientSize();\n    };\n    VanillaTilt.prototype.setTransition = function setTransition() {\n        var _this = this;\n        clearTimeout(this.transitionTimeout);\n        this.element.style.transition = this.settings.speed + \"ms \" + this.settings.easing;\n        if (this.glare) this.glareElement.style.transition = \"opacity \" + this.settings.speed + \"ms \" + this.settings.easing;\n        this.transitionTimeout = setTimeout(function() {\n            _this.element.style.transition = \"\";\n            if (_this.glare) {\n                _this.glareElement.style.transition = \"\";\n            }\n        }, this.settings.speed);\n    };\n    /**\r\n   * Method return patched settings of instance\r\n   * @param {boolean} settings.reverse - reverse the tilt direction\r\n   * @param {number} settings.max - max tilt rotation (degrees)\r\n   * @param {startX} settings.startX - the starting tilt on the X axis, in degrees. Default: 0\r\n   * @param {startY} settings.startY - the starting tilt on the Y axis, in degrees. Default: 0\r\n   * @param {number} settings.perspective - Transform perspective, the lower the more extreme the tilt gets\r\n   * @param {string} settings.easing - Easing on enter/exit\r\n   * @param {number} settings.scale - 2 = 200%, 1.5 = 150%, etc..\r\n   * @param {number} settings.speed - Speed of the enter/exit transition\r\n   * @param {boolean} settings.transition - Set a transition on enter/exit\r\n   * @param {string|null} settings.axis - What axis should be enabled. Can be \"x\" or \"y\"\r\n   * @param {boolean} settings.glare - if it should have a \"glare\" effect\r\n   * @param {number} settings.max-glare - the maximum \"glare\" opacity (1 = 100%, 0.5 = 50%)\r\n   * @param {boolean} settings.glare-prerender - false = VanillaTilt creates the glare elements for you, otherwise\r\n   * @param {boolean} settings.full-page-listening - If true, parallax effect will listen to mouse move events on the whole document, not only the selected element\r\n   * @param {string|object} settings.mouse-event-element - String selector or link to HTML-element what will be listen mouse events\r\n   * @param {boolean} settings.reset - false = If the tilt effect has to be reset on exit\r\n   * @param {boolean} settings.reset-to-start - true = On reset event (mouse leave) will return to initial start angle (if startX or startY is set)\r\n   * @param {gyroscope} settings.gyroscope - Enable tilting by deviceorientation events\r\n   * @param {gyroscopeSensitivity} settings.gyroscopeSensitivity - Between 0 and 1 - The angle at which max tilt position is reached. 1 = 90deg, 0.5 = 45deg, etc..\r\n   * @param {gyroscopeSamples} settings.gyroscopeSamples - How many gyroscope moves to decide the starting position.\r\n   */ VanillaTilt.prototype.extendSettings = function extendSettings(settings) {\n        var defaultSettings = {\n            reverse: false,\n            max: 15,\n            startX: 0,\n            startY: 0,\n            perspective: 1000,\n            easing: \"cubic-bezier(.03,.98,.52,.99)\",\n            scale: 1,\n            speed: 300,\n            transition: true,\n            axis: null,\n            glare: false,\n            \"max-glare\": 1,\n            \"glare-prerender\": false,\n            \"full-page-listening\": false,\n            \"mouse-event-element\": null,\n            reset: true,\n            \"reset-to-start\": true,\n            gyroscope: true,\n            gyroscopeMinAngleX: -45,\n            gyroscopeMaxAngleX: 45,\n            gyroscopeMinAngleY: -45,\n            gyroscopeMaxAngleY: 45,\n            gyroscopeSamples: 10\n        };\n        var newSettings = {};\n        for(var property in defaultSettings){\n            if (property in settings) {\n                newSettings[property] = settings[property];\n            } else if (this.element.hasAttribute(\"data-tilt-\" + property)) {\n                var attribute = this.element.getAttribute(\"data-tilt-\" + property);\n                try {\n                    newSettings[property] = JSON.parse(attribute);\n                } catch (e) {\n                    newSettings[property] = attribute;\n                }\n            } else {\n                newSettings[property] = defaultSettings[property];\n            }\n        }\n        return newSettings;\n    };\n    VanillaTilt.init = function init(elements, settings) {\n        if (elements instanceof Node) {\n            elements = [\n                elements\n            ];\n        }\n        if (elements instanceof NodeList) {\n            elements = [].slice.call(elements);\n        }\n        if (!(elements instanceof Array)) {\n            return;\n        }\n        elements.forEach(function(element) {\n            if (!(\"vanillaTilt\" in element)) {\n                element.vanillaTilt = new VanillaTilt(element, settings);\n            }\n        });\n    };\n    return VanillaTilt;\n}();\nif (typeof document !== \"undefined\") {\n    /* expose the class to window */ window.VanillaTilt = VanillaTilt;\n    /**\r\n   * Auto load\r\n   */ VanillaTilt.init(document.querySelectorAll(\"[data-tilt]\"));\n}\nmodule.exports = VanillaTilt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/vanilla-tilt/lib/vanilla-tilt.js\n");

/***/ })

};
;